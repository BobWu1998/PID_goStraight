#include <Zumo32U4.h>

#include <Wire.h>
#include <Zumo32U4.h>

Zumo32U4Encoders encoders;
Zumo32U4LCD lcd;
Zumo32U4Buzzer buzzer;
Zumo32U4Motors motors;
Zumo32U4ButtonA buttonA;
Zumo32U4ButtonC buttonC;

int standardCountSpeed = 2000 ;// the idea volecity in unit of counts/sec
int count_Left_1;
int count_Left_2;
int count_Right_1;
int count_Right_2;
// delta t for calculating both left/right wheels' volecity
double TIME = 0.1;
unsigned long startTime;

// time interval for the calculation of volecity,in units of ms
int index;
int deltaCountSpeed;
int error_CountSpeed;
int output_Speed;
int output_Speed_Left = 0;
int output_Speed_Right = 0;
int integration_Error_CountSpeed = 0;
int derivative_Error_CountSpeed;
double K_p=0.3, K_i=0, K_d=0.05;
int indexCount= -1;
int arr_errorCountSpeed[] ={0,0,0};
double CountSpeed2Speed = 0.0889 ;


void setup() {
  //motor.setLeftSpeed(300);
  //motor.setRightSpeed(300);
  // put your setup code here, to run once:
  buttonA.waitForButton();
  startTime = millis();
  Serial.begin(2000000);

}

// the basic idea is test volecity for both left and right wheels at the same time
// so that there will be no time intervals between every two execution of PID control.
void loop() {
  count_Left_1 = encoders.getCountsLeft();
  count_Right_1 = encoders.getCountsRight();
  //test the count for both right/left wheels
  delay(100);
  //wait 100ms for the second test for both of the left/right wheels.
  count_Left_2 = encoders.getCountsLeft();
  count_Right_2 = encoders.getCountsRight();
  //test the count again for both right/left wheels
//  Serial.println(count_Left_1);
//  Serial.println(count_Left_2);
//  Serial.println("       ");
 
  
  
  output_Speed_Left = speedControl(count_Left_1, count_Left_2, TIME, standardCountSpeed);
  output_Speed_Right = speedControl(count_Right_1, count_Right_2, TIME, standardCountSpeed);
  



  if((millis()-startTime) > 2000)
  {
   Serial.print("time!");
   motors.setLeftSpeed(0);
   motors.setRightSpeed(0);
  }
  else
  {  
  motors.setLeftSpeed(output_Speed_Left+10);
  motors.setRightSpeed(output_Speed_Right);
  }





     // Clear the screen
  lcd.clear();

  // Go to the next line
  lcd.gotoXY(0, 1);
  // Print a number
  lcd.print(output_Speed_Left);
   
  // Go to the next line
  lcd.gotoXY(0, 2);
  // Print a number
  lcd.print(output_Speed_Right);

  
}

int speedControl(int count_1, int count_2, double Time, int standardCountSpeed)
{
  
  
  deltaCountSpeed = (count_2 - count_1)/Time;
  /*actually we are calculating the count speed with the expression "(count_2 - count_1)/0.1", 
  we are doing the *10 here to avoid data type inconsistent issues*/
  
  error_CountSpeed = standardCountSpeed - deltaCountSpeed;
  
  indexCount = indexCount*(-1);// this is the count for arr, but not encoder
  index = indexCount + 1;// same as above
  arr_errorCountSpeed[index]= error_CountSpeed;
  
  derivative_Error_CountSpeed = indexCount*(arr_errorCountSpeed[2]-arr_errorCountSpeed[0])/Time;
   /*actually we are calculating the count speed with the expression "indexCount*(arr_errorCountSpeed[2]-arr_errorCountSpeed[0])/0.1", 
  we are doing the *10 here to avoid data type inconsistent issues*/
  
  integration_Error_CountSpeed = integration_Error_CountSpeed + deltaCountSpeed;
 
 //
  output_Speed += CountSpeed2Speed*( K_p*error_CountSpeed + K_i*(integration_Error_CountSpeed) + K_d*(derivative_Error_CountSpeed) );
  
 


  return output_Speed;
}

//1s ~ 4830 ~ 400 that is to say, maxSpeed = 4830 counts/s
