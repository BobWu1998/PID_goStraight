#include <Zumo32U4.h>

#include <Wire.h>
#include <Zumo32U4.h>

Zumo32U4Encoders encoders;
Zumo32U4LCD lcd;
Zumo32U4Buzzer buzzer;
Zumo32U4Motors motors;
Zumo32U4ButtonA buttonA;
Zumo32U4ButtonC buttonC;

int standardCountSpeed = 2000 ;
int count_1;int t_1;
int count_2;int t_2;
int count_3;int t_3;
int count_4;int t_4;
int t_Left;
int t_Right;
int index;
int deltaCountSpeed;
int error_CountSpeed;
int output_Speed = 0;
int integration_Error_CountSpeed = 0;
int derivative_Error_CountSpeed;
double K_p=0.1 , K_i=0, K_d=0.1;
int indexCount= -1;
int arr_errorCountSpeed[] ={0,0,0};
double CountSpeed2Speed = 0.0889 ;
void setup() {
  //motor.setLeftSpeed(300);
  delay(1000);
  //motor.setRightSpeed(300);
  // put your setup code here, to run once:
  buttonA.waitForButton();

}

void loop() {
  count_1 = encoders.getCountsLeft();
  t_1 = millis();
  count_2 = encoders.getCountsLeft();
  t_2 = millis();
  t_Left = t_1 - t_2;
  motors.setLeftSpeed(speedControl(count_1, count_2, t_Left, standardCountSpeed));
  
  count_3 = encoders.getCountsLeft();
  t_3 = millis();
  count_4 = encoders.getCountsLeft();
  t_4 = millis();
  int t_Right = t_3 - t_4;
  motors.setRightSpeed(speedControl(count_3, count_4, t_Right, standardCountSpeed));


     // Clear the screen
  lcd.clear();

  // Go to the next line
  lcd.gotoXY(0, 1);

  // Print a number
  lcd.print(output_Speed);
  

  
}

int speedControl(int count1, int count2, int Time, int standardCountSpeed)
{
  
  deltaCountSpeed = (count_2 - count_1)/Time;
  /*actually we are calculating the count speed with the expression "(count_2 - count_1)/0.1", 
  we are doing the *10 here to avoid data type inconsistent issues*/
  
  error_CountSpeed = standardCountSpeed - deltaCountSpeed;
  
  indexCount = indexCount*(-1);// this is the count for arr, but not encoder
  index = indexCount + 1;// same as above
  arr_errorCountSpeed[index]= error_CountSpeed;
  
  derivative_Error_CountSpeed = indexCount*(arr_errorCountSpeed[2]-arr_errorCountSpeed[0])/Time;
   /*actually we are calculating the count speed with the expression "indexCount*(arr_errorCountSpeed[2]-arr_errorCountSpeed[0])/0.1", 
  we are doing the *10 here to avoid data type inconsistent issues*/
  
  integration_Error_CountSpeed = integration_Error_CountSpeed + deltaCountSpeed;
 
 //
  output_Speed += CountSpeed2Speed*( K_p*error_CountSpeed + K_i*(integration_Error_CountSpeed) + K_d*(derivative_Error_CountSpeed) );
  
 
 Serial.println(output_Speed);
  return output_Speed;
}

//1s ~ 4830 ~ 400 that is to say, maxSpeed = 4830 counts/s
